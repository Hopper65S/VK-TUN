#!/usr/bin/env python3
import asyncio
import logging
import socket
import sys
from asyncio.subprocess import PIPE

try:
    import aiohttp
except ImportError:
    print("–û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å aiohttp –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install aiohttp", file=sys.stderr)
    sys.exit(1)

# --- –ù–ê–°–¢–†–û–ô–ö–ò (–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –ó–î–ï–°–¨) ---
BOT_TOKEN = ""
CHAT_ID = ""
# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à Telegram User ID, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @userinfobot. –≠—Ç–æ –í–ê–ñ–ù–û –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
ALLOWED_USER_ID = ""

RESTART_INTERVAL_SECONDS = 5 * 3600  # 5 —á–∞—Å–æ–≤
VK_TUNNEL_COMMAND = [
    "vk-tunnel", "--insecure=1", "--http-protocol=http", "--ws-protocol=ws",
    "--ws-origin=0", "--host=127.0.0.1", "--port=8080",
    "--ws-ping-interval=30"
]

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ >>> 
# -------------------------------------------------------------------
if not all([BOT_TOKEN, CHAT_ID, ALLOWED_USER_ID]):
    print("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê !!!", file=sys.stderr)
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ BOT_TOKEN, CHAT_ID –∏ ALLOWED_USER_ID.", file=sys.stderr)
    sys.exit(1)

try:
    # –°—Ä–∞–∑—É –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
    ALLOWED_USER_ID = int(ALLOWED_USER_ID)
except (ValueError, TypeError):
    print("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê !!!", file=sys.stderr)
    print("ALLOWED_USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789), –∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–º.", file=sys.stderr)
    sys.exit(1)
# -------------------------------------------------------------------


# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–ì–û–í ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s [%(name)s] %(message)s", stream=sys.stdout)
log = logging.getLogger("manager")
log_vktunnel = logging.getLogger("vk-tunnel")
log_telegram = logging.getLogger("telegram")

# --- –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ---
STATE = {'notification_sent': False}
manual_restart_event = asyncio.Event()

def get_server_info():
    try:
        hostname = socket.getfqdn()
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            ip_address = s.getsockname()[0]
        return ip_address, hostname
    except Exception:
        return "127.0.0.1", "localhost"

SERVER_IP, SERVER_HOSTNAME = get_server_info()

async def send_telegram_message(text: str, chat_id=None):
    target_chat_id = chat_id or CHAT_ID
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {'chat_id': target_chat_id, 'text': text, 'parse_mode': 'Markdown'}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=payload, timeout=10) as response:
                if response.status == 200:
                    log_telegram.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {target_chat_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                else:
                    log_telegram.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status}")
    except Exception as e:
        log_telegram.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

async def monitor_stream(stream: asyncio.StreamReader):
    while True:
        line_bytes = await stream.readline()
        if not line_bytes: break
        line = line_bytes.decode('utf-8', errors='ignore').strip()
        log_vktunnel.info(line)
        if not STATE['notification_sent'] and line.startswith("wss:"):
            try:
                wss_url = line.split(maxsplit=1)[1]
                log.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω WSS –∞–¥—Ä–µ—Å: {wss_url}. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
                message = (
                    f"üöÄ *VK Tunnel –∑–∞–ø—É—â–µ–Ω/–ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω*\n\n"
                    f"üñ•Ô∏è *–°–µ—Ä–≤–µ—Ä:* `{SERVER_HOSTNAME}`\n"
                    f"üåê *IP:* `{SERVER_IP}`\n\n"
                    f"‚ú® *–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*\n`python client.py --wss {wss_url}`"
                )
                await send_telegram_message(message)
                STATE['notification_sent'] = True
            except IndexError:
                log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å URL –∏–∑ —Å—Ç—Ä–æ–∫–∏: '{line}'")

async def listen_for_telegram_commands():
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç Telegram —á–µ—Ä–µ–∑ long polling."""
    last_update_id = 0
    log.info("–ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥ Telegram...")
    while True:
        try:
            # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å –≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–π–º-–∞—É—Ç >>>
            async with asyncio.timeout(60): # –ï—Å–ª–∏ –≤–µ—Å—å –±–ª–æ–∫ –∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ 60—Å - –ø—Ä–µ—Ä–≤–µ—Ç—Å—è
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
                params = {'offset': last_update_id + 1, 'timeout': 50} # –°–∞–º –∑–∞–ø—Ä–æ—Å –∂–¥–µ—Ç –¥–æ 50—Å
                async with aiohttp.ClientSession() as session:
                    async with session.get(url, params=params) as response:
                        if response.status != 200:
                            log.error(f"–û—à–∏–±–∫–∞ API Telegram: {response.status}")
                            await asyncio.sleep(10)
                            continue

                        data = await response.json()
                        for update in data.get("result", []):
                            last_update_id = update["update_id"]
                            message = update.get("message")
                            if message and "text" in message:
                                user_id = message["from"]["id"]
                                chat_id = message["chat"]["id"]
                                command = message["text"].strip()

                                log.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '{command}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                                if command == "/restart-tunnel":
                                    if user_id == ALLOWED_USER_ID:
                                        log.info(f"–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞ –æ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
                                        await send_telegram_message("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç—É–Ω–Ω–µ–ª—è...", chat_id=chat_id)
                                        manual_restart_event.set()
                                    else:
                                        log.warning(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ù–ï–ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–æ–∂–∏–¥–∞–ª—Å—è {ALLOWED_USER_ID}).")
                                        await send_telegram_message("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", chat_id=chat_id)
        except asyncio.TimeoutError:
            log.warning("–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram API. –ü–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å...")
            # –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –∏–¥–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é —Ü–∏–∫–ª–∞
            continue
        except Exception as e:
            log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ Telegram: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(10)


async def manage_vk_tunnel_lifecycle():
    """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ–º vk-tunnel."""
    while True:
        log.info(f"–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞. –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞–Ω–æ–≤—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {RESTART_INTERVAL_SECONDS / 3600:.1f} —á–∞—Å–æ–≤.")
        STATE['notification_sent'] = False
        manual_restart_event.clear()

        try:
            process = await asyncio.create_subprocess_exec(
                *VK_TUNNEL_COMMAND, stdout=PIPE, stderr=PIPE, stdin=None
            )
            log.info(f"–ü—Ä–æ—Ü–µ—Å—Å vk-tunnel –∑–∞–ø—É—â–µ–Ω —Å PID: {process.pid}")
        except FileNotFoundError:
            log.critical("–ö–æ–º–∞–Ω–¥–∞ 'vk-tunnel' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 30—Å...")
            await asyncio.sleep(30)
            continue

        monitor_stdout_task = asyncio.create_task(monitor_stream(process.stdout))
        monitor_stderr_task = asyncio.create_task(monitor_stream(process.stderr))

        wait_process_task = asyncio.create_task(process.wait())
        wait_timer_task = asyncio.create_task(asyncio.sleep(RESTART_INTERVAL_SECONDS))
        wait_command_task = asyncio.create_task(manual_restart_event.wait())

        done, pending = await asyncio.wait(
            [wait_process_task, wait_timer_task, wait_command_task],
            return_when=asyncio.FIRST_COMPLETED
        )

        if wait_process_task in done:
            log.warning(f"–ü—Ä–æ—Ü–µ—Å—Å vk-tunnel (PID: {process.pid}) –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–∞–º —Å –∫–æ–¥–æ–º {process.returncode}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
        elif wait_timer_task in done:
            log.info(f"–°—Ä–∞–±–æ—Ç–∞–ª —Ç–∞–π–º–µ—Ä. –ü–ª–∞–Ω–æ–≤—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ vk-tunnel (PID: {process.pid})...")
        elif wait_command_task in done:
            log.info(f"–†—É—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ vk-tunnel (PID: {process.pid})...")

        for task in pending:
            task.cancel()

        if process.returncode is None:
            try:
                process.terminate()
                await asyncio.wait_for(process.wait(), timeout=10)
                log.info(f"–ü—Ä–æ—Ü–µ—Å—Å {process.pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω (terminate).")
            except asyncio.TimeoutError:
                log.warning(f"–ü—Ä–æ—Ü–µ—Å—Å {process.pid} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ terminate. –£–±–∏–≤–∞–µ–º (kill)...")
                process.kill()
                await process.wait()

        monitor_stdout_task.cancel()
        monitor_stderr_task.cancel()

        log.info("–ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...")
        await asyncio.sleep(5)

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —Å–ª—É—à–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥."""
    await asyncio.gather(
        manage_vk_tunnel_lifecycle(),
        listen_for_telegram_commands()
    )

if __name__ == "__main__":
    try:
        log.info("–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ vk-tunnel —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ Telegram.")
        asyncio.run(main())
    except KeyboardInterrupt:
        log.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")