import asyncio
import logging
import os
import re
import signal
import subprocess
from typing import Optional, Dict, Any

import aiohttp
from admin import AdminManager  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

log = logging.getLogger("telegram")

class TelegramCommandHandler:
    def __init__(self, bot_token: str, allowed_user_id: int, state: Dict[str, Any]):
        self.bot_token = bot_token
        self.owner_id = allowed_user_id  # –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–≤–ª–∞–¥–µ–ª–µ—Ü)
        self.state = state
        self.manual_restart_event = asyncio.Event()
        self.admin_manager = AdminManager()  # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        if allowed_user_id not in self.admin_manager.admins:
            self.admin_manager.add_admin(allowed_user_id)
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return self.admin_manager.is_admin(user_id)
    
    def is_owner(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º"""
        return user_id == self.owner_id

    async def send_message(self, text: str, chat_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if len(text) > 4096:
            text = text[:4090] + "\n[...]"

        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        payload = {'chat_id': chat_id, 'text': text, 'parse_mode': 'Markdown'}

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=payload, timeout=10) as response:
                    if response.status == 200:
                        log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                    else:
                        log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status}, {await response.text()}")
        except Exception as e:
            log.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

    async def get_aes_key(self) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ AES –∫–ª—é—á–∞ –∏–∑ config_light.py"""
        try:
            with open('config_light.py', 'r', encoding='utf-8') as f:
                content = f.read()

            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "aes_key_hex": "–∑–Ω–∞—á–µ–Ω–∏–µ"
            match = re.search(r'"aes_key_hex"\s*:\s*"([^"]*)"', content)
            if match:
                return match.group(1)
            return None
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ AES –∫–ª—é—á–∞: {e}")
            return None

    async def restart_server(self) -> tuple[bool, str]:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ server.py"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞ server.py
            result = subprocess.run(['pgrep', '-f', 'server.py'],
                                  capture_output=True, text=True)

            if result.returncode != 0 or not result.stdout.strip():
                return False, "–ü—Ä–æ—Ü–µ—Å—Å server.py –Ω–µ –Ω–∞–π–¥–µ–Ω"

            pids = result.stdout.strip().split('\n')

            # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
            for pid in pids:
                try:
                    os.kill(int(pid), signal.SIGKILL)
                    log.info(f"–ü—Ä–æ—Ü–µ—Å—Å server.py (PID: {pid}) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except Exception as e:
                    log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ PID {pid}: {e}")

            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await asyncio.sleep(2)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ nohup
            subprocess.Popen(['nohup', 'python', 'server.py'],
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL,
                           preexec_fn=os.setpgrp)

            await asyncio.sleep(2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            check_result = subprocess.run(['pgrep', '-f', 'server.py'],
                                        capture_output=True, text=True)

            if check_result.returncode == 0 and check_result.stdout.strip():
                new_pids = check_result.stdout.strip().split('\n')
                return True, f"Server.py —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ù–æ–≤—ã–µ PID: {', '.join(new_pids)}"
            else:
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å server.py"

        except Exception as e:
            log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ server.py: {e}")
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"

    async def handle_command(self, command: str, chat_id: str, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
        if command.startswith("/add-admin"):
            if not self.is_owner(user_id):
                await self.send_message("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", chat_id)
                return
            
            parts = command.split()
            if len(parts) != 2:
                await self.send_message("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/add-admin USER_ID`", chat_id)
                return
            
            try:
                new_admin_id = int(parts[1])
                success, message = self.admin_manager.add_admin(new_admin_id)
                if success:
                    await self.send_message(f"‚úÖ {message}", chat_id)
                else:
                    await self.send_message(f"‚ö†Ô∏è {message}", chat_id)
            except ValueError:
                await self.send_message("‚ùå USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", chat_id)
        
        elif command.startswith("/remove-admin"):
            if not self.is_owner(user_id):
                await self.send_message("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", chat_id)
                return
            
            parts = command.split()
            if len(parts) != 2:
                await self.send_message("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remove-admin USER_ID`", chat_id)
                return
            
            try:
                admin_id = int(parts[1])
                if admin_id == self.owner_id:
                    await self.send_message("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", chat_id)
                    return
                
                success, message = self.admin_manager.remove_admin(admin_id)
                if success:
                    await self.send_message(f"‚úÖ {message}", chat_id)
                else:
                    await self.send_message(f"‚ö†Ô∏è {message}", chat_id)
            except ValueError:
                await self.send_message("‚ùå USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", chat_id)
        
        elif command == "/admin-list":
            if not self.is_admin(user_id):
                await self.send_message("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", chat_id)
                return
            
            admin_info = self.admin_manager.get_admin_info()
            await self.send_message(admin_info, chat_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (—Ç–µ–ø–µ—Ä—å –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        restricted_commands = ['/restart-tunnel', '/restart-server', '/status', '/log']
        if command in restricted_commands and not self.is_admin(user_id):
            await self.send_message("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", chat_id)
            return

        if command == "/restart-tunnel":
            await self.send_message("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç—É–Ω–Ω–µ–ª—è...", chat_id)
            self.manual_restart_event.set()

        elif command == "/restart-server":
            await self.send_message("‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é server.py...", chat_id)
            success, message = await self.restart_server()
            if success:
                await self.send_message(f"‚úÖ {message}", chat_id)
            else:
                await self.send_message(f"‚ùå {message}", chat_id)

        elif command == "/status":
            if self.state.get('process_pid') and self.state.get('process_start_time'):
                import time
                uptime_seconds = int(time.time() - self.state['process_start_time'])

                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
                last_activity = self.state.get('last_health_check_time', self.state.get('process_start_time'))
                last_activity_seconds = int(time.time() - last_activity)

                status_text = (f"üìä *–°—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ vk-tunnel*\n\n"
                             f"PID –ø—Ä–æ—Ü–µ—Å—Å–∞: `{self.state['process_pid']}`\n"
                             f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: `{uptime_seconds // 3600}—á {(uptime_seconds % 3600) // 60}–º {uptime_seconds % 60}—Å`\n"
                             f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: `{last_activity_seconds}—Å –Ω–∞–∑–∞–¥`\n")
                await self.send_message(status_text, chat_id)
            else:
                await self.send_message("‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å vk-tunnel –Ω–µ –∑–∞–ø—É—â–µ–Ω.", chat_id)

        elif command == "/log":
            try:
                with open('manager.log', 'r', encoding='utf-8') as f:
                    lines = f.readlines()

                last_lines = lines[-20:]
                if not last_lines:
                    await self.send_message("‚ÑπÔ∏è –õ–æ–≥-—Ñ–∞–π–ª –ø–æ–∫–∞ –ø—É—Å—Ç.", chat_id)
                    return

                log_output = "".join(last_lines)
                response_text = f"üìÑ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥–∞:*\n\n```{log_output}```"
                await self.send_message(response_text, chat_id)

            except FileNotFoundError:
                await self.send_message("‚ö†Ô∏è –õ–æ–≥-—Ñ–∞–π–ª –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω.", chat_id)
            except Exception as e:
                await self.send_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥-—Ñ–∞–π–ª: {e}", chat_id)

        elif command == "/key":
            # –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º –≤ –≥—Ä—É–ø–ø–µ
            aes_key = await self.get_aes_key()
            if aes_key is not None:
                if aes_key:  # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –ø—É—Å—Ç–æ–π
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Å–ø–æ–π–ª–µ—Ä–∞
                    message = f'üîê <b>AES –∫–ª—é—á:</b>\n\n<span class="tg-spoiler">{aes_key}</span>\n\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–ª—é—á</i>'

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å HTML parse mode
                    url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
                    payload = {'chat_id': chat_id, 'text': message, 'parse_mode': 'HTML'}

                    try:
                        async with aiohttp.ClientSession() as session:
                            async with session.post(url, data=payload, timeout=10) as response:
                                if response.status == 200:
                                    log.info(f"AES –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id} (–∫–∞–∫ —Å–ø–æ–π–ª–µ—Ä)")
                                else:
                                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ —Å–ø–æ–π–ª–µ—Ä–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                                    await self.send_message(f"üîê *AES –∫–ª—é—á:*\n`{aes_key}`", chat_id)
                    except Exception as e:
                        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–æ–π–ª–µ—Ä–∞: {e}")
                        # Fallback –Ω–∞ –æ–±—ã—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                        await self.send_message(f"üîê *AES –∫–ª—é—á:*\n`{aes_key}`", chat_id)
                else:
                    await self.send_message("‚ÑπÔ∏è AES –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)", chat_id)
            else:
                await self.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AES –∫–ª—é—á –∏–∑ config_light.py", chat_id)

        elif command == "/help":
            # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º
            help_text = """üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/key - –ü–æ–ª—É—á–∏—Ç—å AES –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*
/status - –°—Ç–∞—Ç—É—Å vk-tunnel
/log - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞
/restart-tunnel - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å vk-tunnel
/restart-server - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å server.py
/admin-list - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
            
            if self.is_owner(user_id):
                help_text += """

*–ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞:*
/add-admin USER_ID - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/remove-admin USER_ID - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
            
            await self.send_message(help_text, chat_id)

        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
            pass

    async def listen_for_commands(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
        last_update_id = 0
        log.info("–ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥ Telegram...")

        while True:
            try:
                async with asyncio.timeout(60):
                    url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
                    params = {'offset': last_update_id + 1, 'timeout': 50}

                    async with aiohttp.ClientSession() as session:
                        async with session.get(url, params=params) as response:
                            if response.status != 200:
                                log.error(f"–û—à–∏–±–∫–∞ API Telegram: {response.status}")
                                await asyncio.sleep(10)
                                continue

                            data = await response.json()

                            for update in data.get("result", []):
                                last_update_id = update["update_id"]
                                message = update.get("message")

                                if not (message and "text" in message):
                                    continue

                                user_id = message["from"]["id"]
                                chat_id = message["chat"]["id"]
                                command = message["text"].strip()

                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /)
                                if command.startswith('/'):
                                    await self.handle_command(command, str(chat_id), user_id)

            except asyncio.TimeoutError:
                continue
            except Exception as e:
                log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ Telegram: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10—Å...")
                await asyncio.sleep(10)