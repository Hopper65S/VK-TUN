import asyncio
import logging
import time
from typing import Optional, Dict, Any

import aiohttp
from admin import AdminManager

log = logging.getLogger("telegram")

class TelegramCommandHandler:
    def __init__(self, bot_token: str, allowed_user_id: int, state: Dict[str, Any]):
        self.bot_token = bot_token
        self.owner_id = allowed_user_id
        self.state = state
        self.manual_restart_event = asyncio.Event()
        self.admin_manager = AdminManager()
        self.start_event = asyncio.Event()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        if allowed_user_id not in self.admin_manager.admins:
            self.admin_manager.add_admin(allowed_user_id)
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return self.admin_manager.is_admin(user_id)
    
    def is_owner(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º"""
        return user_id == self.owner_id

    async def send_message(self, text: str, chat_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if len(text) > 4096:
            text = text[:4090] + "\n[...]"

        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        payload = {'chat_id': chat_id, 'text': text, 'parse_mode': 'Markdown'}

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=payload, timeout=10) as response:
                    if response.status == 200:
                        log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                    else:
                        log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status}, {await response.text()}")
        except Exception as e:
            log.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

    async def handle_command(self, command: str, chat_id: str, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
        if command.startswith("/add-admin"):
            if not self.is_owner(user_id):
                await self.send_message("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", chat_id)
                return
            
            parts = command.split()
            if len(parts) != 2:
                await self.send_message("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/add-admin USER_ID`", chat_id)
                return
            
            try:
                new_admin_id = int(parts[1])
                success, message = self.admin_manager.add_admin(new_admin_id)
                if success:
                    await self.send_message(f"‚úÖ {message}", chat_id)
                else:
                    await self.send_message(f"‚ö†Ô∏è {message}", chat_id)
            except ValueError:
                await self.send_message("‚ùå USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", chat_id)
        
        elif command.startswith("/remove-admin"):
            if not self.is_owner(user_id):
                await self.send_message("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", chat_id)
                return
            
            parts = command.split()
            if len(parts) != 2:
                await self.send_message("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remove-admin USER_ID`", chat_id)
                return
            
            try:
                admin_id = int(parts[1])
                if admin_id == self.owner_id:
                    await self.send_message("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", chat_id)
                    return
                
                success, message = self.admin_manager.remove_admin(admin_id)
                if success:
                    await self.send_message(f"‚úÖ {message}", chat_id)
                else:
                    await self.send_message(f"‚ö†Ô∏è {message}", chat_id)
            except ValueError:
                await self.send_message("‚ùå USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", chat_id)
        elif command == "/accept":
            if not self.is_admin(user_id):
                await self.send_message("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", chat_id)
                return
                
            if not self.state.get('waiting_for_auth'):
                await self.send_message("‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è", chat_id)
                return
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Enter –≤ –ø—Ä–æ—Ü–µ—Å—Å vk-tunnel
            if self.state.get('vk_process'):
                try:
                    self.state['vk_process'].stdin.write(b'\n')
                    await self.state['vk_process'].stdin.drain()
                    await self.send_message("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", chat_id)
                    log.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ VK")
                except Exception as e:
                    await self.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}", chat_id)
                    log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Enter: {e}")
            else:
                await self.send_message("‚ùå –ü—Ä–æ—Ü–µ—Å—Å vk-tunnel –Ω–µ –Ω–∞–π–¥–µ–Ω", chat_id)
        elif command == "/admin-list":
            if not self.is_admin(user_id):
                await self.send_message("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", chat_id)
                return
            
            admin_info = self.admin_manager.get_admin_info()
            await self.send_message(admin_info, chat_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        restricted_commands = ['/restart-tunnel', '/status', '/log']
        if command in restricted_commands and not self.is_admin(user_id):
            await self.send_message("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", chat_id)
            return

        if command == "/restart-tunnel":
            await self.send_message("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç—É–Ω–Ω–µ–ª—è...", chat_id)
            self.manual_restart_event.set()
        elif command == "/start":
            if not self.is_admin(user_id):
                await self.send_message("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", chat_id)
                return
                
            if not self.state.get('is_stopped'):
                await self.send_message(
                    "‚ö†Ô∏è *–¢—É–Ω–Ω–µ–ª—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω*\n\n"
                    "–î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /restart-tunnel", 
                    chat_id
                )
                return
                
            self.state['is_stopped'] = False
            self.state['total_crashes'] = 0
            await self.send_message("‚úÖ –ó–∞–ø—É—Å–∫ —Ç—É–Ω–Ω–µ–ª—è...", chat_id)
            self.start_event.set()
        elif command == "/status":
            if self.state.get('process_pid') and self.state.get('process_start_time'):
                uptime_seconds = int(time.time() - self.state['process_start_time'])
                last_health_check = self.state.get('last_health_check_time', self.state.get('process_start_time'))
                last_health_seconds = int(time.time() - last_health_check)
                
                status_text = (f"üìä *–°—Ç–∞—Ç—É—Å VK Tunnel*\n\n"
                             f"‚úÖ *–°—Ç–∞—Ç—É—Å:* –†–∞–±–æ—Ç–∞–µ—Ç\n"
                             f"üî¢ *PID:* `{self.state['process_pid']}`\n"
                             f"‚è±Ô∏è *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* `{uptime_seconds // 3600}—á {(uptime_seconds % 3600) // 60}–º {uptime_seconds % 60}—Å`\n"
                             f"üíì *–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:* `{last_health_seconds}—Å –Ω–∞–∑–∞–¥`\n")
                
                if self.state.get('current_host'):
                    status_text += f"üîó *–¢–µ–∫—É—â–∏–π host:* `{self.state['current_host']}`\n"
                
                if self.state.get('consecutive_failures', 0) > 0:
                    status_text += f"‚ö†Ô∏è *–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫:* `{self.state['consecutive_failures']}`\n"
                
                await self.send_message(status_text, chat_id)
            else:
                await self.send_message("‚ùå –ü—Ä–æ—Ü–µ—Å—Å vk-tunnel –Ω–µ –∑–∞–ø—É—â–µ–Ω.", chat_id)

        elif command == "/log":
            try:
                with open('manager.log', 'r', encoding='utf-8') as f:
                    lines = f.readlines()

                last_lines = lines[-20:]
                if not last_lines:
                    await self.send_message("‚ÑπÔ∏è –õ–æ–≥-—Ñ–∞–π–ª –ø–æ–∫–∞ –ø—É—Å—Ç.", chat_id)
                    return

                log_output = "".join(last_lines)
                response_text = f"üìÑ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥–∞:*\n\n```{log_output}```"
                await self.send_message(response_text, chat_id)

            except FileNotFoundError:
                await self.send_message("‚ö†Ô∏è –õ–æ–≥-—Ñ–∞–π–ª –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω.", chat_id)
            except Exception as e:
                await self.send_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥-—Ñ–∞–π–ª: {e}", chat_id)

        elif command == "/help":
            help_text = """üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*
/status - –°—Ç–∞—Ç—É—Å vk-tunnel
/start - –ó–∞–ø—É—Ç—Å—Ç–∏—Ç—å vk-tunnel (–í —Å–ª—É—á–∞–µ –ø–∞–¥–µ–Ω–∏—è –±–æ–ª–µ–µ 3—Ö —Ä–∞–∑)
/log - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞
/restart-tunnel - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å vk-tunnel
/admin-list - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
/accept - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é VK"""
            
            if self.is_owner(user_id):
                help_text += """

*–ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞:*
/add-admin USER_ID - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/remove-admin USER_ID - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
            
            await self.send_message(help_text, chat_id)

        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
            pass

    async def listen_for_commands(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
        last_update_id = 0
        log.info("–ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥ Telegram...")

        while True:
            try:
                async with asyncio.timeout(60):
                    url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
                    params = {'offset': last_update_id + 1, 'timeout': 50}

                    async with aiohttp.ClientSession() as session:
                        async with session.get(url, params=params) as response:
                            if response.status != 200:
                                log.error(f"–û—à–∏–±–∫–∞ API Telegram: {response.status}")
                                await asyncio.sleep(10)
                                continue

                            data = await response.json()

                            for update in data.get("result", []):
                                last_update_id = update["update_id"]
                                message = update.get("message")

                                if not (message and "text" in message):
                                    continue

                                user_id = message["from"]["id"]
                                chat_id = message["chat"]["id"]
                                command = message["text"].strip()

                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /)
                                if command.startswith('/'):
                                    await self.handle_command(command, str(chat_id), user_id)

            except asyncio.TimeoutError:
                continue
            except Exception as e:
                log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ Telegram: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10—Å...")
                await asyncio.sleep(10)