import asyncio
import logging
import socket
import sys
import time
import json
import psutil
from asyncio.subprocess import PIPE
from logging.handlers import TimedRotatingFileHandler
from api import update_api_host
import os
from dynamic_config import DynamicConfigLoader
try:
    import aiohttp
except ImportError:
    print("–û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å aiohttp –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install aiohttp", file=sys.stderr)
    sys.exit(1)

from handlers import TelegramCommandHandler
config_loader = DynamicConfigLoader()

async def on_config_changed():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    global BOT_TOKEN, CHAT_ID, ALLOWED_USER_ID, API_TOKEN, API_DOMAIN
    global HEALTH_CHECK_INTERVAL_SECONDS, TUNNEL_HOST, TUNNEL_PORT
    global VPN_CONFIG, VK_TUNNEL_COMMAND
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    CHAT_ID = os.getenv("CHAT_ID")
    ALLOWED_USER_ID = int(os.getenv("ALLOWED_USER_ID", "0"))
    API_TOKEN = os.getenv("API_TOKEN")
    API_DOMAIN = os.getenv("API_DOMAIN")
    HEALTH_CHECK_INTERVAL_SECONDS = int(os.getenv("HEALTH_CHECK_INTERVAL_SECONDS", "30"))
    TUNNEL_HOST = "127.0.0.1"  
    TUNNEL_PORT = int(os.getenv("TUNNEL_PORT", "10001"))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN
    VPN_CONFIG["uuid"] = os.getenv("CONFIG_UUID", VPN_CONFIG["uuid"])
    VPN_CONFIG["inbound"]["configProfileUuid"] = os.getenv("CONFIG_PROFILE_UUID", "")
    VPN_CONFIG["inbound"]["configProfileInboundUuid"] = os.getenv("CONFIG_PROFILE_INBOUND_UUID", "")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º VK_TUNNEL_COMMAND —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    VK_TUNNEL_COMMAND = [
        "vk-tunnel", "--verbose", "--insecure=1", "--http-protocol=http", "--ws-protocol=ws",
        "--ws-origin=0", "--host", TUNNEL_HOST, "--port", str(TUNNEL_PORT),
        "--ws-ping-interval=30"
    ]
    
    log.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ .env")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º telegram handler
    if 'telegram_handler' in globals():
        telegram_handler.bot_token = BOT_TOKEN
        telegram_handler.owner_id = ALLOWED_USER_ID
        
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    if STATE.get('notification_sent') and TUNNEL_PORT != int(os.getenv("TUNNEL_PORT", "10001")):
        log.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ TUNNEL_PORT, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç—É–Ω–Ω–µ–ª—è")
        await send_telegram_message("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Ç—É–Ω–Ω–µ–ª—å...")
        telegram_handler.manual_restart_event.set()

# –î–æ–±–∞–≤–ª—è–µ–º callback
config_loader.add_callback(on_config_changed)

VK_TUNNEL_COMMAND = [
    "vk-tunnel", "--verbose", "--insecure=1", "--http-protocol=http", "--ws-protocol=ws",
    "--ws-origin=0", "--host", TUNNEL_HOST, "--port", str(TUNNEL_PORT),
    "--ws-ping-interval=30"
]
VPN_CONFIG = {
    "uuid": "5c47363f-81b4-4e8e-88f1-852bb253acec",
    "inbound": {
        "configProfileUuid": os.getenv("CONFIG_PROFILE_UUID"),
        "configProfileInboundUuid": os.getenv("CONFIG_PROFILE_INBOUND_UUID")
    },
    "remark": "üî¥ VK Tunnel",
    "address": "tunnel.vk-apps.com",
    "port": 443,
    "path": "/ws",
    "sni": "tunnel.vk-apps.com",
    "alpn": "h3,h2,http/1.1",
    "fingerprint": "chrome",
    "isDisabled": False,
    "securityLayer": "TLS",
    "xHttpExtraParams": None,
    "muxParams": None,
    "sockoptParams": None,
    "serverDescription": None,
    "tag": None,
    "isHidden": False,
    "overrideSniFromAddress": True,
    "vlessRouteId": None,
    "allowInsecure": False
}
# ----------------------------------------------------

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
if not all([BOT_TOKEN, CHAT_ID, os.getenv("ALLOWED_USER_ID")]):
    print("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê !!!", file=sys.stderr)
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ BOT_TOKEN, CHAT_ID –∏ ALLOWED_USER_ID –≤ .env —Ñ–∞–π–ª–µ.", file=sys.stderr)
    sys.exit(1)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ALLOWED_USER_ID –≤ int –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
try:
    ALLOWED_USER_ID = int(os.getenv("ALLOWED_USER_ID"))
except (ValueError, TypeError):
    print("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê !!!", file=sys.stderr)
    print("ALLOWED_USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", file=sys.stderr)
    sys.exit(1)

if not all([API_TOKEN, VPN_CONFIG["uuid"], VPN_CONFIG["inbound"]["configProfileUuid"], VPN_CONFIG["inbound"]["configProfileInboundUuid"]]):
    print("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê !!!", file=sys.stderr)
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ API_TOKEN –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã VPN_CONFIG.", file=sys.stderr)
    sys.exit(1)
# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–ì–û–í –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –†–û–¢–ê–¶–ò–ï–ô ---
log_formatter = logging.Formatter("%(asctime)s %(levelname)s [%(name)s] %(message)s")
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(log_formatter)
root_logger = logging.getLogger()
root_logger.setLevel(logging.INFO)
root_logger.addHandler(console_handler)

log = logging.getLogger("manager")
log_vktunnel = logging.getLogger("vk-tunnel")
log_telegram = logging.getLogger("telegram")

# --- –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ---
STATE = {
    'notification_sent': False,
    'process_start_time': None,
    'last_output_time': None,
    'process_pid': None,
    'last_health_check_time': None,
    'current_wss_url': None,
    'current_host': None,
    'consecutive_failures': 0,
    'total_crashes': 0, 
    'is_stopped': False,
    'auth_url': None,          
    'waiting_for_auth': False,  
    'vk_process': None
}

def get_server_info():
    try:
        hostname = socket.getfqdn()
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            ip_address = s.getsockname()[0]
        return ip_address, hostname
    except Exception:
        return "127.0.0.1", "localhost"

SERVER_IP, SERVER_HOSTNAME = get_server_info()

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
telegram_handler = TelegramCommandHandler(BOT_TOKEN, ALLOWED_USER_ID, STATE)

async def send_telegram_message(text: str, chat_id=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    target_chat_id = chat_id or CHAT_ID
    await telegram_handler.send_message(text, target_chat_id)



async def monitor_stream(stream: asyncio.StreamReader, stream_name: str = "unknown"):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    while True:
        try:
            line_bytes = await stream.readline()
            if not line_bytes:
                log.warning(f"–ü–æ—Ç–æ–∫ {stream_name} –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—ã–ª –∑–∞–∫—Ä—ã—Ç.")
                break

            STATE['last_output_time'] = time.time()
            line = line_bytes.decode('utf-8', errors='ignore').strip()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            log_vktunnel.info(f"[{stream_name}] {line}")

            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ VK –≤ –ª—é–±–æ–º –ø–æ—Ç–æ–∫–µ
            if "oauth.vk.ru" in line or "Please open the following link" in line:
                log.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ {stream_name}: {line}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å URL
                if "https://oauth.vk.ru" in line:
                    import re
                    url_match = re.search(r'https://oauth\.vk\.ru/[^\s]*', line)
                    if url_match:
                        auth_url = url_match.group(0)
                        STATE['auth_url'] = auth_url
                        STATE['waiting_for_auth'] = True
                        
                        message = (f"üîê *–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è VK*\n\n"
                                  f"–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ:\n"
                                  f"`{auth_url}`\n\n"
                                  f"–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /accept")
                        
                        await send_telegram_message(message)
                        log.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ VK: {auth_url}")
                # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å—Å—ã–ª–∫–µ, –∂–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
                elif "Please open the following link" in line:
                    STATE['waiting_for_auth'] = True
                    log.info("–û–∂–∏–¥–∞–µ–º —Å—Å—ã–ª–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö...")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ WSS URL –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not STATE['notification_sent'] and line.startswith("wss:"):
                try:
                    wss_url = line.split(maxsplit=1)[1] if len(line.split()) > 1 else line
                    STATE['current_wss_url'] = wss_url
                    STATE['waiting_for_auth'] = False
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º host –∏–∑ WSS URL
                    import re
                    match = re.search(r'wss://([^/]+)', wss_url)
                    if match:
                        host = match.group(1)
                        STATE['current_host'] = host
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º API
                        from api import update_api_host
                        api_updated = await update_api_host(host, API_DOMAIN, API_TOKEN, VPN_CONFIG)
                        
                        log.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω WSS –∞–¥—Ä–µ—Å: {wss_url}. Host: {host}")
                        
                        message = (f"‚úÖ *VK Tunnel –∑–∞–ø—É—â–µ–Ω*\n\n"
                                   f"üñ•Ô∏è *–°–µ—Ä–≤–µ—Ä:* `{SERVER_HOSTNAME}`\n"
                                   f"üåê *IP:* `{SERVER_IP}`\n"
                                   f"üîó *Host:* `{host}`\n\n")
                        
                        if api_updated:
                            message += "‚úÖ *API –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ*\n\n"
                        else:
                            message += "‚ùå *–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API*\n\n"
                        
                        message += "üì± *–û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –≤–∞—à–µ–º VPN –∫–ª–∏–µ–Ω—Ç–µ*"
                        
                        await send_telegram_message(message)
                        STATE['notification_sent'] = True
                        STATE['consecutive_failures'] = 0
                except Exception as e:
                    log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WSS URL: {e}")
                    
        except asyncio.CancelledError:
            break
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –≤ monitor_stream ({stream_name}): {e}")

async def check_tunnel_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ç—É–Ω–Ω–µ–ª—è —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å"""
    log.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ç—É–Ω–Ω–µ–ª—è –∑–∞–ø—É—â–µ–Ω–∞. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {HEALTH_CHECK_INTERVAL_SECONDS}—Å.")
    await asyncio.sleep(20)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫

    while True:
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ —Ç—É–Ω–Ω–µ–ª—é
            url = f"http://{TUNNEL_HOST}:{TUNNEL_PORT}"
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=5) as response:
                    # –õ—é–±–æ–π –æ—Ç–≤–µ—Ç –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç—É–Ω–Ω–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç
                    STATE['last_health_check_time'] = time.time()
                    STATE['consecutive_failures'] = 0
                    log.info(f"Health check: —Ç—É–Ω–Ω–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç (—Å—Ç–∞—Ç—É—Å: {response.status})")

        except (aiohttp.ClientError, asyncio.TimeoutError) as e:
            STATE['consecutive_failures'] += 1
            log.warning(f"Health check failed ({STATE['consecutive_failures']}): {type(e).__name__}")
            
            # –ï—Å–ª–∏ 3 –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Ä—è–¥ - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
            if STATE['consecutive_failures'] >= 3:
                log.error("–¢—É–Ω–Ω–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ 3 –ø—Ä–æ–≤–µ—Ä–æ–∫. –ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.")
                await send_telegram_message("‚ö†Ô∏è *–¢—É–Ω–Ω–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç*\n\n–ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                telegram_handler.manual_restart_event.set()
                break
                
        except asyncio.CancelledError:
            log.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            break
        except Exception as e:
            log.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")

        await asyncio.sleep(HEALTH_CHECK_INTERVAL_SECONDS)

async def manage_vk_tunnel_lifecycle():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º vk-tunnel"""
    while True:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
        if STATE['is_stopped']:
            await asyncio.sleep(5)
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–¥–µ–Ω–∏–π (—É–≤–µ–ª–∏—á–∏–º –ª–∏–º–∏—Ç –¥–æ 5 –¥–ª—è –±–æ–ª—å—à–µ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏)
        if STATE['total_crashes'] >= 5:
            await send_telegram_message(
                "‚ùå *–¢—É–Ω–Ω–µ–ª—å —É–ø–∞–ª 5 —Ä–∞–∑*\n\n"
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Ä—É—á–Ω—É—é."
            )
            STATE['is_stopped'] = True
            continue
            
        log.info("–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ vk-tunnel.")
        STATE.update({
            'notification_sent': False,
            'process_start_time': time.time(),
            'last_output_time': time.time(),
            'process_pid': None,
            'last_health_check_time': time.time(),
            'current_wss_url': None,
            'current_host': None,
            'consecutive_failures': 0
        })
        telegram_handler.manual_restart_event.clear()

        try:
            process = await asyncio.create_subprocess_exec(
                *VK_TUNNEL_COMMAND,
                stdout=PIPE,
                stderr=PIPE,
                stdin=PIPE
            )
            STATE['process_pid'] = process.pid
            STATE['vk_process'] = process
            log.info(f"–ü—Ä–æ—Ü–µ—Å—Å vk-tunnel –∑–∞–ø—É—â–µ–Ω —Å PID: {process.pid}")
        except FileNotFoundError:
            log.critical("–ö–æ–º–∞–Ω–¥–∞ 'vk-tunnel' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 30—Å...")
            await asyncio.sleep(30)
            continue
        except Exception as e:
            log.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å vk-tunnel: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 30—Å...")
            await asyncio.sleep(30)
            continue

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor_stdout_task = asyncio.create_task(monitor_stream(process.stdout, "stdout"))
        monitor_stderr_task = asyncio.create_task(monitor_stream(process.stderr, "stderr"))
        health_check_task = asyncio.create_task(check_tunnel_health())

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π (–≠–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∑–∞–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∑–¥–µ—Å—å, –ø–µ—Ä–µ–¥ asyncio.wait)
        wait_process_task = asyncio.create_task(process.wait())
        wait_command_task = asyncio.create_task(telegram_handler.manual_restart_event.wait())
        wait_start_task = asyncio.create_task(telegram_handler.start_event.wait())

        # –ñ–¥–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        done, pending = await asyncio.wait(
            [wait_process_task, wait_command_task, wait_start_task, health_check_task],
            return_when=asyncio.FIRST_COMPLETED
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        reason = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"
        if wait_process_task in done:
            STATE['total_crashes'] += 1
            reason = f"–ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–∞–º —Å –∫–æ–¥–æ–º {process.returncode} (–ø–∞–¥–µ–Ω–∏–µ {STATE['total_crashes']}/5)"
            await send_telegram_message(f"‚ö†Ô∏è *–¢—É–Ω–Ω–µ–ª—å —É–ø–∞–ª*\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é...")
        elif wait_command_task in done:
            reason = "–ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
            STATE['total_crashes'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
        elif wait_start_task in done:
            reason = "–ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞"
            STATE['total_crashes'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
        elif health_check_task in done:
            STATE['total_crashes'] += 1
            reason = f"health check –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—É (–ø–∞–¥–µ–Ω–∏–µ {STATE['total_crashes']}/5)"

        log.warning(f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ vk-tunnel (PID: {process.pid}). –ü—Ä–∏—á–∏–Ω–∞: {reason}.")

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task in pending:
            task.cancel()

        monitor_stdout_task.cancel()
        monitor_stderr_task.cancel()
        health_check_task.cancel()

        await asyncio.gather(
            monitor_stdout_task,
            monitor_stderr_task,
            health_check_task,
            return_exceptions=True
        )

        # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª —É–±–∏–π—Å—Ç–≤–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if process.returncode is None:
            log.warning(f"–ü—ã—Ç–∞—é—Å—å —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {process.pid}...")
            try:
                # –°–Ω–∞—á–∞–ª–∞ SIGTERM
                process.terminate()
                await asyncio.wait_for(process.wait(), timeout=5)
                log.info(f"–ü—Ä–æ—Ü–µ—Å—Å {process.pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω (SIGTERM).")
            except asyncio.TimeoutError:
                log.warning(f"–ü—Ä–æ—Ü–µ—Å—Å {process.pid} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ SIGTERM. –ü—ã—Ç–∞—é—Å—å SIGKILL...")
                process.kill()
                await asyncio.wait_for(process.wait(), timeout=5)
                log.info(f"–ü—Ä–æ—Ü–µ—Å—Å {process.pid} —É—Å–ø–µ—à–Ω–æ —É–±–∏—Ç (SIGKILL).")
            except Exception as e:
                log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–±–∏–π—Å—Ç–≤–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ {process.pid}: {e}. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ psutil...")
                # Fallback —á–µ—Ä–µ–∑ psutil –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
                try:
                    p = psutil.Process(process.pid)
                    p.terminate()
                    p.wait(timeout=5)
                except (psutil.NoSuchProcess, psutil.TimeoutExpired):
                    log.info(f"–ü—Ä–æ—Ü–µ—Å—Å {process.pid} —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                except Exception as kill_e:
                    log.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {process.pid}: {kill_e}. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ PID –º—ë—Ä—Ç–≤
            await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –û–°
            if psutil.pid_exists(process.pid):
                log.error(f"–ü—Ä–æ—Ü–µ—Å—Å {process.pid} –≤—Å—ë –µ—â—ë –∂–∏–≤! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ psutil...")
                try:
                    p = psutil.Process(process.pid)
                    p.kill()  # –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç SIGKILL
                    p.wait(timeout=5)  # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    log.info(f"–ü—Ä–æ—Ü–µ—Å—Å {process.pid} —É—Å–ø–µ—à–Ω–æ —É–±–∏—Ç —á–µ—Ä–µ–∑ psutil.")
                except psutil.NoSuchProcess:
                    log.info(f"–ü—Ä–æ—Ü–µ—Å—Å {process.pid} —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                except psutil.TimeoutExpired:
                    log.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {process.pid}.")
                except Exception as e:
                    log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–±–∏–π—Å—Ç–≤–µ —á–µ—Ä–µ–∑ psutil: {e}")

        log.info("–ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...")
        await asyncio.sleep(10)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    log.info("–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ vk-tunnel —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ Telegram.")
    log.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: BOT_TOKEN={'*' * 10}, CHAT_ID={CHAT_ID}, ALLOWED_USER_ID={ALLOWED_USER_ID}")
    log.info(f"API: {API_DOMAIN}")
    config_loader.start_watching()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(
        manage_vk_tunnel_lifecycle(),
        telegram_handler.listen_for_commands()
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        log.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        log.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)